// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  password           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  profile            Profile?
  followers          User[]         @relation("UserToUser")
  following          User[]         @relation("UserToUser")
  scopes             Scope[]
  contributions      Scope[]        @relation("UserToScope")
  organizationsAdmin Organization[] @relation("UserToOrganization")
  organizations      Organization[] @relation("OrganizationToUser")
}

model Profile {
  id           String   @id @default(cuid())
  name         String
  company      String?
  emails       String[]
  primaryEmail String?
  provider     String?
  bio          String?
  homepage     String?
  location     String?
  avatar       String?
  displayName  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan     @default(COMMUNITY)
  owner     User[]   @relation("UserToOrganization")
  members   User[]   @relation("OrganizationToUser")
}

model Scope {
  id            String      @id @default(cuid())
  name          String
  harmony       Boolean     @default(true)
  description   String?
  userId        String?
  privacy       Visibility  @default(PUBLIC)
  framework     Framework?
  components    Component[]
  collaborators User[]      @relation("UserToScope")
  tags          Tag[]
  owner         User?       @relation(fields: [userId], references: [id])
}

model Component {
  id           String      @id @default(cuid())
  name         String
  description  String?
  code         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  tags         Tag[]
  tests        Test[]
  versions     Version[]
  dependencies Component[] @relation("ComponentToComponent")
  visibility   Visibility  @default(PUBLIC)
  framework    Framework   @default(NONE)
  component    Component?  @relation("ComponentToComponent", fields: [componentId], references: [id])
  componentId  String?
  downloads    Int         @default(0)
  Scope        Scope?      @relation(fields: [scopeId], references: [id])
  scopeId      String?
}

model Test {
  id          String    @id @default(cuid())
  name        String
  description String?
  version     String?
  passed      Boolean
  message     String?
  duration    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Component   Component @relation(fields: [componentId], references: [id])
  componentId String
}

model Tag {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Component   Component? @relation(fields: [componentId], references: [id])
  componentId String?
  Scope       Scope?     @relation(fields: [scopeId], references: [id])
  scopeId     String?
}

model Version {
  id          String     @id @default(cuid())
  name        String?
  description String?
  number      String
  createdAt   DateTime   @default(now())
  Component   Component? @relation(fields: [componentId], references: [id])
  componentId String?
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Plan {
  COMMUNITY
  BUSINESS
}

enum Framework {
  REACT
  VUE
  ANGULAR
  NONE
}

enum Role {
  OWNER
  CONTRIBUTOR
  VIEWER
}
